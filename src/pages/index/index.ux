<import name="switch-bar" src="@components/SwitchBar/SwitchBar.ux"></import>

<template>
  <div class="page">
    <scroll class="scroll" scroll-y="true" bounces="true">
      <scroll id="lyrics-container" scroll-y="true" class="lyrics-container">
        <div for="{{lyrics}}" class="line {{lyricsClasses[$idx]}}" style="{{lyricsStyles[$idx]}}">
          <text id="line{{$idx}}" class="text">
            {{ $item.text }}
          </text>
        </div>
      </scroll>
    </scroll>
  </div>
</template>

<script>
import router from "@system.router"
import {parseFromNeteaseWebLyrics} from "../../lyric/neteaseweb"

export default {
  private: {
    lyrics: [],
    currentIndex: 0,
    // 存储每行的测量数据：{ index, normalHeight, scaledHeight }
    lyricsHeights: [],
    // 每行对应的行内样式
    lyricsStyles: [],
    // 每行对应的附加类名
    lyricsClasses: [],
    scaleFactor: 1.4
  },
  async measureLyricsHeights() {
    try {
      // 遍历所有歌词行，测量每一行的高度
      const results = await Promise.all(
        this.lyrics.map((_, index) => {
          return new Promise((resolve, reject) => {
            const elementId = `line${index}`
            const el = this.$element(elementId)
            el.getBoundingClientRect({
              success: (rect) => {
                const normalHeight = rect.height
                const scaledHeight = normalHeight * this.scaleFactor
                resolve({index, normalHeight, scaledHeight})
              },
              fail: (errorData, errorCode) => {
                reject({index, errorData, errorCode})
              }
            })
          })
        })
      )
      this.lyricsHeights = results
      // 初始化每一行的样式：先用正常高度
      this.lyricsStyles = results.map((data) => ({height: data.normalHeight + "px"}))
      // 更新当前激活行的样式
      this.updateActiveStyle()
      // 滚动到当前激活行
      this.scrollToActive()
    } catch (error) {
      console.error("测量歌词高度出错：", error)
    }
  },
  updateActiveStyle() {
    if (this.lyricsHeights.length && this.currentIndex < this.lyricsHeights.length) {
      const currData = this.lyricsHeights[this.currentIndex]
      // 当前激活行使用放大高度，并添加激活样式
      this.lyricsStyles.splice(this.currentIndex, 1, {
        height: currData.scaledHeight + "px"
      })
      this.lyricsClasses.splice(this.currentIndex, 1, "active-text")
    }
  },
  scrollToActive() {
    const containerEl = this.$element("lyrics-container")

    let offset = 0
    for (let i = 0; i < this.currentIndex; i++) {
      offset += this.lyricsHeights[i].normalHeight
    }

    const activeLineHeight = this.lyricsHeights[this.currentIndex].scaledHeight
    const activeCenter = offset + activeLineHeight / 2

    console.log(activeCenter)
    containerEl.scrollTo({
      top: activeCenter
    })
  },
  playNext() {
    if (this.currentIndex < this.lyrics.length - 1) {
      const prevIndex = this.currentIndex
      // 恢复上一行样式（恢复正常高度）
      const prevData = this.lyricsHeights[prevIndex]
      this.lyricsStyles.splice(prevIndex, 1, {
        height: prevData.normalHeight + "px"
      })
      this.lyricsClasses.splice(prevIndex, 1, "disactive-text")

      // 切换到下一行，并更新样式
      this.currentIndex++
      const currData = this.lyricsHeights[this.currentIndex]
      this.lyricsStyles.splice(this.currentIndex, 1, {
        height: currData.scaledHeight + "px"
      })
      this.lyricsClasses.splice(this.currentIndex, 1, "active-text")
      // 重新计算滚动目标
      this.scrollToActive()
    }
  },
  onShow() {
    // 解析歌词文本
    this.lyrics = parseFromNeteaseWebLyrics(
      `[00:03.35]握不住的他
[00:04.68]演唱:林俊杰
[01:35.26][00:12.34]
[00:12.89]银白色月牙 映照着脚ㄚ
[00:17.29]一寸寸 一遍遍
[00:19.69]亲吻浪花
[00:22.22]泥沙挣扎 浸湿眼角
[00:26.78]刹那 和着眼泪 分不清呀
[00:31.16]
[00:32.10]你给的说法 说走到分岔
[00:36.87]又无力 又疲倦
[00:39.46]付出爱的代价
[00:41.93]无力自拔 心放不下
[00:46.57]勉强 爱的盈缺 变成时差
[00:52.41]爱情不只玫瑰花
[00:54.37]还有不安的惩罚
[00:56.81]快乐呀 误解呀
[00:59.18]随着时间都会增长
[01:01.55]退潮的爱像刀疤
[01:54.81][00:50.75]
[01:04.14]伤过给一个说法
[01:06.57]放了才能够快乐
[01:09.01]让心好好休息一下
[01:11.44]握不住的他 放下也罢
[01:16.80]专辑：她说 概念自选辑
[01:21.45]Dumbbird @ 虾米歌词组 制作
[01:36.42]你给的说法 说走到分岔
[01:40.93]又无力 又疲倦
[01:43.55]付出爱的代价
[01:46.01]无力自拔 心放不下
[01:50.73]勉强 爱的盈缺 变成时差
[01:55.90]爱情不只玫瑰花
[01:58.46]还有不安的惩罚
[02:00.84]快乐呀 误解呀
[02:03.27]随着时间都会增长
[02:05.70]退潮的爱像刀疤
[02:08.26]伤过给一个说法
[02:10.66]放了才能够快乐
[02:13.13]让心好好休息一下
[02:15.53]握不住的沙 放下也罢
[02:28.59]专辑：她说 概念自选辑
[02:35.14]Dumbbird @ 虾米歌词组 制作
[02:40.64]爱情不只玫瑰花
[02:42.89]还有不安的惩罚
[02:45.26]快乐呀 误解呀
[02:47.69]随着时间都会增长
[02:50.17]退潮的爱像刀疤
[02:52.66]伤过给一个说法
[03:14.74][01:15.46]
[02:55.06]放了才能够快乐
[02:57.49]让心好好休息一下
[03:08.86][02:19.43]
[03:00.08]放了才能够快乐
[03:02.49]让心好好休息一下
[03:05.02]握不住的沙 放下也罢
[03:10.20]握不住的他 放下也罢
[03:22.78][02:39.51][01:27.16]`
    )
    // 初始化样式与类名数组
    this.lyricsStyles = new Array(this.lyrics.length).fill({})
    this.lyricsClasses = new Array(this.lyrics.length).fill({})
    // 延时确保视图渲染完毕后再开始测量
    setTimeout(() => {
      this.measureLyricsHeights()
      // 根据歌词中的 time 属性依次调用 playNext
      this.lyrics.forEach((ly) => {
        setTimeout(() => {
          this.playNext()
        }, ly.time)
      })
    }, 1000)
  }
}
</script>

<style lang="less">
@import "@less/global.less";
@import "./index.less";
</style>