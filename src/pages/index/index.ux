<import name="switch-bar" src="@components/SwitchBar/SwitchBar.ux"></import>

<template>
  <div class="page">
    <scroll class="scroll" scroll-y="true" bounces="true">
      <scroll id="lyrics-container" scroll-y="true" class="lyrics-container" @scroll="onScroll" bounces="true">
        <div for="{{lyrics}}" class="line {{lyricsClasses[$idx]}}" style="{{lyricsStyles[$idx]}}">
          <text id="line{{$idx}}" class="text" style="opacity: {{lyricsStyles[$idx].opacity || 0.6}}">
            {{ $item.text }}
          </text>
        </div>
      </scroll>
    </scroll>
  </div>
</template>

<script>
import router from "@system.router"
import audio from "@system.audio"
import folme from "@system.folme"
import { parseFromLrcString } from "../../lyric/parsers/lrc"

import { GetTrackLyricsNew } from "../../musicplatforms/ncm/src/apis/track"

// 工具函数：延时等待
function wait(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

export default {
  private: {
    lyrics: [],
    currentIndex: 0,
    currentScroll: 0, // 记录当前滚动高度
    zeroIndexWithInit: true,
    lyricsHeights: [],
    lyricsOffsets: [],
    lyricsStyles: [],
    lyricsClasses: [],
    scaleFactor: 1.2,
    delayOffset: 1000,  //模拟器
    //delayOffset: 2000,
    timer: null         // 定时器标识
  },
  // 滚动事件回调，记录滚动距离
  onScroll(e) {
    this.currentScroll = e.scrollY
  },
  async measureLyricsHeights() {
    try {
      const results = await Promise.all(
        this.lyrics.map((_, index) => {
          return new Promise((resolve, reject) => {
            const elementId = `line${index}`
            const el = this.$element(elementId)
            el.getBoundingClientRect({
              success: (rect) => {
                const normalHeight = rect.height + 15
                const scaledHeight = (normalHeight * this.scaleFactor) + 15
                resolve({index, normalHeight, scaledHeight})
              },
              fail: (errorData, errorCode) => {
                reject({index, errorData, errorCode})
              }
            })
          })
        })
      )
      this.lyricsHeights = results
      this.lyricsStyles = results.map((data) => ({height: data.normalHeight + "px"}))
      let offset = 0
      this.lyricsOffsets = results.map((data) => {
        const currentOffset = offset
        offset += data.normalHeight + 10
        return currentOffset
      })
      this.updateActiveStyle()
      this.scrollToActive()
    } catch (error) {
      console.error("测量歌词高度出错：", error)
    }
  },
  updateActiveStyle() {
    if (!this.lyricsHeights.length) return;
    // 遍历所有歌词行，根据 currentIndex 设置样式
    this.lyricsHeights.forEach((data, i) => {
      if (i < this.currentIndex) {
        // 已播放歌词：设置 disactive 样式
        this.lyricsStyles.splice(i, 1, {
          height: data.normalHeight + "px",
          opacity: 0.6
        })
        this.lyricsClasses.splice(i, 1, "disactive-text")
      } else if (i === this.currentIndex) {
        // 当前激活歌词：active 样式
        this.lyricsStyles.splice(i, 1, {
          height: data.scaledHeight + "px",
          opacity: 1.0
        })
        this.lyricsClasses.splice(i, 1, "active-text")
      } else {
        // 后续歌词：默认样式
        this.lyricsStyles.splice(i, 1, {
          height: data.normalHeight + "px",
          opacity: 0.6
        })
        this.lyricsClasses.splice(i, 1, "")
      }
    })
  },
  async scrollToActive() {
    // 根据当前音频播放时间进行校准，单位转换：audio.currentTime (秒) -> 毫秒，并加上 delayOffset
    const currentAudioTimeMs = (audio.currentTime * 1000) + this.delayOffset
    let calibratedIndex = 0
    for (let i = 0; i < this.lyrics.length; i++) {
      if (this.lyrics[i].time <= currentAudioTimeMs) {
        calibratedIndex = i
      } else {
        break
      }
    }
    this.currentIndex = calibratedIndex
    this.updateActiveStyle() // 同步更新所有行的样式

    if (!this.lyricsHeights.length) return
    const index = this.currentIndex
    const activeLineHeight = this.lyricsHeights[index].normalHeight
    const duration = 0.3 // 动画时长，单位秒
    const reboundOffset = activeLineHeight * 0.3

    // 动态获取容器和当前激活行的位置，利用记录的 currentScroll
    this.$element("lyrics-container").getBoundingClientRect({
      success: (containerRect) => {
        this.$element(`line${index}`).getBoundingClientRect({
          success: (lineRect) => {
            const containerHeight = containerRect.height
            const desiredTop = (containerHeight - lineRect.height) / 2
            const targetScroll =
              this.currentScroll + (lineRect.top - containerRect.top) - desiredTop
            this.$element("lyrics-container").scrollTo({top: targetScroll, behavior: "smooth"})
          }
        })
      }
    })
  },
  // 保留 playNext 方法，以便手动控制（本例中主要使用定时器更新）
  playNext() {
    if (this.currentIndex < this.lyrics.length - 1 && !this.zeroIndexWithInit) {
      this.currentIndex++
      this.updateActiveStyle()
      this.scrollToActive()
    }
    else{
      audio.play()
      this.zeroIndexWithInit = false
    }
  },
  startLyricTimer() {
    // 每 100 毫秒检查一次当前音频播放时间，更新歌词滚动与状态
    this.timer = setInterval(() => {
      const currentAudioTimeMs = (audio.currentTime * 1000) + this.delayOffset
      let newIndex = 0
      for (let i = 0; i < this.lyrics.length; i++) {
        if (this.lyrics[i].time <= currentAudioTimeMs) {
          newIndex = i
        } else {
          break
        }
      }
      if (newIndex !== this.currentIndex) {
        this.currentIndex = newIndex
        this.updateActiveStyle()
        this.scrollToActive()
      }
    }, 100)
  },
  async InitLycris(){
    const origLyric = await GetTrackLyricsNew(1854644975)
    console.log(origLyric)

    console.log(this.lyrics)
    this.lyricsStyles = new Array(this.lyrics.length).fill({})
    this.lyricsClasses = new Array(this.lyrics.length).fill({})
    setTimeout(() => {
      this.measureLyricsHeights()
      audio.src = "/common/testaudio.mp3"
      audio.play()
      // 启动歌词同步定时器
      this.startLyricTimer()
    }, 1000)
  },
  onShow() {
    this.InitLycris()
  }
}
</script>

<style lang="less">
@import "@less/global.less";
@import "./index.less";
</style>